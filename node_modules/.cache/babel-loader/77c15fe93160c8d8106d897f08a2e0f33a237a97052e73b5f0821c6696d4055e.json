{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Documents\\\\Shiva project\\\\my-react-firebase-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentView, setCurrentView] = useState('dashboard');\n  const [userId, setUserId] = useState('guest-user');\n  const [isAuthReady, setIsAuthReady] = useState(true);\n  const [appMessage, setAppMessage] = useState('');\n  const [isSigningIn, setIsSigningIn] = useState(false);\n  const [ciphers, setCiphers] = useState([]);\n  const [cipherTextMessage, setCipherTextMessage] = useState('');\n  const [decodeKey, setDecodeKey] = useState('');\n  const [decodedMessage, setDecodedMessage] = useState('');\n  const [decodeMessage, setDecodeMessage] = useState('');\n  const [plainTextMessage, setPlainTextMessage] = useState('');\n  const [encodedMessage, setEncodedMessage] = useState('');\n  const [cipherName, setCipherName] = useState('');\n  const [cipherType, setCipherType] = useState('linearShift');\n  const [shiftAmount, setShiftAmount] = useState(3);\n  const [substitutionMethod, setSubstitutionMethod] = useState('manual');\n  const [substitutionKeyword, setSubstitutionKeyword] = useState('secret');\n  const [substitutionMap, setSubstitutionMap] = useState('abcdefghijklmnopqrstuvwxyz');\n  const [substitutionMapOutput, setSubstitutionMapOutput] = useState('zyxwvutsrqponmlkjihgfedcba');\n  const hasUniqueChars = str => new Set(str).size === str.length;\n  const generateSubstitutionMapFromKeyword = keyword => {\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let uniqueChars = '';\n    keyword = keyword.toLowerCase();\n    for (let ch of keyword) {\n      if (alphabet.includes(ch) && !uniqueChars.includes(ch)) uniqueChars += ch;\n    }\n    for (let ch of alphabet) {\n      if (!uniqueChars.includes(ch)) uniqueChars += ch;\n    }\n    return {\n      inputMap: alphabet,\n      outputMap: uniqueChars\n    };\n  };\n  const linearShiftEncode = (text, shift) => text.replace(/[a-z]/gi, char => {\n    const base = char === char.toUpperCase() ? 65 : 97;\n    return String.fromCharCode((char.charCodeAt(0) - base + shift + 26) % 26 + base);\n  });\n  const substitutionEncode = (text, inputMap, outputMap) => {\n    if (!hasUniqueChars(inputMap) || !hasUniqueChars(outputMap) || inputMap.length !== outputMap.length) return '';\n    return text.replace(/[a-z]/gi, char => {\n      const idx = inputMap.toLowerCase().indexOf(char.toLowerCase());\n      if (idx === -1) return char;\n      const sub = outputMap[idx];\n      return char === char.toUpperCase() ? sub.toUpperCase() : sub;\n    });\n  };\n  const handleEncode = () => {\n    if (!plainTextMessage) return;\n    let input = substitutionMap;\n    let output = substitutionMapOutput;\n    if (substitutionMethod === 'keyword') {\n      const maps = generateSubstitutionMapFromKeyword(substitutionKeyword);\n      input = maps.inputMap;\n      output = maps.outputMap;\n    }\n    let encoded = '';\n    if (cipherType === 'linearShift') encoded = linearShiftEncode(plainTextMessage, shiftAmount);else if (cipherType === 'substitution') encoded = substitutionEncode(plainTextMessage, input, output);else if (cipherType === 'shiftSubstitution') encoded = substitutionEncode(linearShiftEncode(plainTextMessage, shiftAmount), input, output);\n    setEncodedMessage(encoded);\n  };\n  const handleDecode = () => {\n    if (!cipherTextMessage || !decodeKey) return;\n    let result = '';\n    try {\n      const keyObj = JSON.parse(decodeKey);\n      const type = keyObj.type;\n      let input = '',\n        output = '';\n      if (keyObj.keyword) {\n        const maps = generateSubstitutionMapFromKeyword(keyObj.keyword);\n        input = maps.inputMap;\n        output = maps.outputMap;\n      } else {\n        input = keyObj.inputMap;\n        output = keyObj.outputMap;\n      }\n      if (type === 'linearShift') result = linearShiftEncode(cipherTextMessage, -keyObj.shiftAmount);else if (type === 'substitution') result = substitutionEncode(cipherTextMessage, output, input);else if (type === 'shiftSubstitution') {\n        const step1 = substitutionEncode(cipherTextMessage, output, input);\n        result = linearShiftEncode(step1, -keyObj.shiftAmount);\n      }\n    } catch (e) {\n      const num = parseInt(decodeKey);\n      if (!isNaN(num)) result = linearShiftEncode(cipherTextMessage, -num);\n    }\n    setDecodedMessage(result);\n  };\n  const handleSaveCipher = () => {\n    const newCipher = {\n      name: cipherName,\n      type: cipherType,\n      shiftAmount,\n      substitutionMethod,\n      keyword: substitutionKeyword,\n      inputMap: substitutionMap,\n      outputMap: substitutionMapOutput\n    };\n    setCiphers([...ciphers, newCipher]);\n    setCipherName('');\n  };\n  const renderMain = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 space-y-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold\",\n      children: \"Cipher Creator (Local Version)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Cipher Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: cipherName,\n        onChange: e => setCipherName(e.target.value),\n        className: \"border p-1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSaveCipher,\n        className: \"ml-2 px-2 py-1 bg-green-500 text-white\",\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Type:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: cipherType,\n        onChange: e => setCipherType(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"linearShift\",\n          children: \"Linear Shift\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"substitution\",\n          children: \"Substitution\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"shiftSubstitution\",\n          children: \"Shift + Substitution\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), (cipherType === 'linearShift' || cipherType === 'shiftSubstitution') && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Shift:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: shiftAmount,\n        onChange: e => setShiftAmount(parseInt(e.target.value)),\n        className: \"border p-1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this), (cipherType === 'substitution' || cipherType === 'shiftSubstitution') && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Method:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: substitutionMethod,\n        onChange: e => setSubstitutionMethod(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"manual\",\n          children: \"Manual\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"keyword\",\n          children: \"Keyword\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this), substitutionMethod === 'keyword' ? /*#__PURE__*/_jsxDEV(\"input\", {\n        value: substitutionKeyword,\n        onChange: e => setSubstitutionKeyword(e.target.value),\n        className: \"border p-1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: substitutionMap,\n          onChange: e => setSubstitutionMap(e.target.value),\n          className: \"border p-1 mr-1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: substitutionMapOutput,\n          onChange: e => setSubstitutionMapOutput(e.target.value),\n          className: \"border p-1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: plainTextMessage,\n        onChange: e => setPlainTextMessage(e.target.value),\n        placeholder: \"Message to encode\",\n        className: \"border w-full p-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleEncode,\n        className: \"bg-blue-500 text-white px-4 py-2 mt-2\",\n        children: \"Encode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-gray-100 p-2 mt-2\",\n        children: encodedMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: cipherTextMessage,\n        onChange: e => setCipherTextMessage(e.target.value),\n        placeholder: \"Message to decode\",\n        className: \"border w-full p-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: decodeKey,\n        onChange: e => setDecodeKey(e.target.value),\n        placeholder: \"Decode key (e.g., 3 or JSON)\",\n        className: \"border p-2 w-full mt-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDecode,\n        className: \"bg-purple-500 text-white px-4 py-2 mt-2\",\n        children: \"Decode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-gray-100 p-2 mt-2\",\n        children: decodedMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-50\",\n    children: isAuthReady && renderMain()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"c5AQNn42tuIJqMWykA6833MyrX4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","currentView","setCurrentView","userId","setUserId","isAuthReady","setIsAuthReady","appMessage","setAppMessage","isSigningIn","setIsSigningIn","ciphers","setCiphers","cipherTextMessage","setCipherTextMessage","decodeKey","setDecodeKey","decodedMessage","setDecodedMessage","decodeMessage","setDecodeMessage","plainTextMessage","setPlainTextMessage","encodedMessage","setEncodedMessage","cipherName","setCipherName","cipherType","setCipherType","shiftAmount","setShiftAmount","substitutionMethod","setSubstitutionMethod","substitutionKeyword","setSubstitutionKeyword","substitutionMap","setSubstitutionMap","substitutionMapOutput","setSubstitutionMapOutput","hasUniqueChars","str","Set","size","length","generateSubstitutionMapFromKeyword","keyword","alphabet","uniqueChars","toLowerCase","ch","includes","inputMap","outputMap","linearShiftEncode","text","shift","replace","char","base","toUpperCase","String","fromCharCode","charCodeAt","substitutionEncode","idx","indexOf","sub","handleEncode","input","output","maps","encoded","handleDecode","result","keyObj","JSON","parse","type","step1","e","num","parseInt","isNaN","handleSaveCipher","newCipher","name","renderMain","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","target","onClick","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/admin/Documents/Shiva project/my-react-firebase-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction App() {\n  const [currentView, setCurrentView] = useState('dashboard');\n  const [userId, setUserId] = useState('guest-user');\n  const [isAuthReady, setIsAuthReady] = useState(true);\n  const [appMessage, setAppMessage] = useState('');\n  const [isSigningIn, setIsSigningIn] = useState(false);\n  const [ciphers, setCiphers] = useState([]);\n\n  const [cipherTextMessage, setCipherTextMessage] = useState('');\n  const [decodeKey, setDecodeKey] = useState('');\n  const [decodedMessage, setDecodedMessage] = useState('');\n  const [decodeMessage, setDecodeMessage] = useState('');\n\n  const [plainTextMessage, setPlainTextMessage] = useState('');\n  const [encodedMessage, setEncodedMessage] = useState('');\n\n  const [cipherName, setCipherName] = useState('');\n  const [cipherType, setCipherType] = useState('linearShift');\n  const [shiftAmount, setShiftAmount] = useState(3);\n  const [substitutionMethod, setSubstitutionMethod] = useState('manual');\n  const [substitutionKeyword, setSubstitutionKeyword] = useState('secret');\n  const [substitutionMap, setSubstitutionMap] = useState('abcdefghijklmnopqrstuvwxyz');\n  const [substitutionMapOutput, setSubstitutionMapOutput] = useState('zyxwvutsrqponmlkjihgfedcba');\n\n  const hasUniqueChars = (str) => new Set(str).size === str.length;\n\n  const generateSubstitutionMapFromKeyword = (keyword) => {\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let uniqueChars = '';\n    keyword = keyword.toLowerCase();\n    for (let ch of keyword) {\n      if (alphabet.includes(ch) && !uniqueChars.includes(ch)) uniqueChars += ch;\n    }\n    for (let ch of alphabet) {\n      if (!uniqueChars.includes(ch)) uniqueChars += ch;\n    }\n    return { inputMap: alphabet, outputMap: uniqueChars };\n  };\n\n  const linearShiftEncode = (text, shift) => text.replace(/[a-z]/gi, char => {\n    const base = char === char.toUpperCase() ? 65 : 97;\n    return String.fromCharCode(((char.charCodeAt(0) - base + shift + 26) % 26) + base);\n  });\n\n  const substitutionEncode = (text, inputMap, outputMap) => {\n    if (!hasUniqueChars(inputMap) || !hasUniqueChars(outputMap) || inputMap.length !== outputMap.length) return '';\n    return text.replace(/[a-z]/gi, char => {\n      const idx = inputMap.toLowerCase().indexOf(char.toLowerCase());\n      if (idx === -1) return char;\n      const sub = outputMap[idx];\n      return char === char.toUpperCase() ? sub.toUpperCase() : sub;\n    });\n  };\n\n  const handleEncode = () => {\n    if (!plainTextMessage) return;\n    let input = substitutionMap;\n    let output = substitutionMapOutput;\n    if (substitutionMethod === 'keyword') {\n      const maps = generateSubstitutionMapFromKeyword(substitutionKeyword);\n      input = maps.inputMap;\n      output = maps.outputMap;\n    }\n    let encoded = '';\n    if (cipherType === 'linearShift') encoded = linearShiftEncode(plainTextMessage, shiftAmount);\n    else if (cipherType === 'substitution') encoded = substitutionEncode(plainTextMessage, input, output);\n    else if (cipherType === 'shiftSubstitution') encoded = substitutionEncode(linearShiftEncode(plainTextMessage, shiftAmount), input, output);\n    setEncodedMessage(encoded);\n  };\n\n  const handleDecode = () => {\n    if (!cipherTextMessage || !decodeKey) return;\n    let result = '';\n    try {\n      const keyObj = JSON.parse(decodeKey);\n      const type = keyObj.type;\n      let input = '', output = '';\n      if (keyObj.keyword) {\n        const maps = generateSubstitutionMapFromKeyword(keyObj.keyword);\n        input = maps.inputMap;\n        output = maps.outputMap;\n      } else {\n        input = keyObj.inputMap;\n        output = keyObj.outputMap;\n      }\n      if (type === 'linearShift') result = linearShiftEncode(cipherTextMessage, -keyObj.shiftAmount);\n      else if (type === 'substitution') result = substitutionEncode(cipherTextMessage, output, input);\n      else if (type === 'shiftSubstitution') {\n        const step1 = substitutionEncode(cipherTextMessage, output, input);\n        result = linearShiftEncode(step1, -keyObj.shiftAmount);\n      }\n    } catch (e) {\n      const num = parseInt(decodeKey);\n      if (!isNaN(num)) result = linearShiftEncode(cipherTextMessage, -num);\n    }\n    setDecodedMessage(result);\n  };\n\n  const handleSaveCipher = () => {\n    const newCipher = { name: cipherName, type: cipherType, shiftAmount, substitutionMethod, keyword: substitutionKeyword, inputMap: substitutionMap, outputMap: substitutionMapOutput };\n    setCiphers([...ciphers, newCipher]);\n    setCipherName('');\n  };\n\n  const renderMain = () => (\n    <div className=\"p-6 space-y-4\">\n      <h1 className=\"text-2xl font-bold\">Cipher Creator (Local Version)</h1>\n      <div>\n        <label>Cipher Name:</label>\n        <input value={cipherName} onChange={(e) => setCipherName(e.target.value)} className=\"border p-1\" />\n        <button onClick={handleSaveCipher} className=\"ml-2 px-2 py-1 bg-green-500 text-white\">Save</button>\n      </div>\n      <div>\n        <label>Type:</label>\n        <select value={cipherType} onChange={(e) => setCipherType(e.target.value)}>\n          <option value=\"linearShift\">Linear Shift</option>\n          <option value=\"substitution\">Substitution</option>\n          <option value=\"shiftSubstitution\">Shift + Substitution</option>\n        </select>\n      </div>\n      {(cipherType === 'linearShift' || cipherType === 'shiftSubstitution') && (\n        <div>\n          <label>Shift:</label>\n          <input type=\"number\" value={shiftAmount} onChange={(e) => setShiftAmount(parseInt(e.target.value))} className=\"border p-1\" />\n        </div>\n      )}\n      {(cipherType === 'substitution' || cipherType === 'shiftSubstitution') && (\n        <div>\n          <label>Method:</label>\n          <select value={substitutionMethod} onChange={(e) => setSubstitutionMethod(e.target.value)}>\n            <option value=\"manual\">Manual</option>\n            <option value=\"keyword\">Keyword</option>\n          </select>\n          {substitutionMethod === 'keyword' ? (\n            <input value={substitutionKeyword} onChange={(e) => setSubstitutionKeyword(e.target.value)} className=\"border p-1\" />\n          ) : (\n            <>\n              <input value={substitutionMap} onChange={(e) => setSubstitutionMap(e.target.value)} className=\"border p-1 mr-1\" />\n              <input value={substitutionMapOutput} onChange={(e) => setSubstitutionMapOutput(e.target.value)} className=\"border p-1\" />\n            </>\n          )}\n        </div>\n      )}\n\n      <div>\n        <textarea value={plainTextMessage} onChange={(e) => setPlainTextMessage(e.target.value)} placeholder=\"Message to encode\" className=\"border w-full p-2\" />\n        <button onClick={handleEncode} className=\"bg-blue-500 text-white px-4 py-2 mt-2\">Encode</button>\n        <div className=\"bg-gray-100 p-2 mt-2\">{encodedMessage}</div>\n      </div>\n\n      <div>\n        <textarea value={cipherTextMessage} onChange={(e) => setCipherTextMessage(e.target.value)} placeholder=\"Message to decode\" className=\"border w-full p-2\" />\n        <input value={decodeKey} onChange={(e) => setDecodeKey(e.target.value)} placeholder=\"Decode key (e.g., 3 or JSON)\" className=\"border p-2 w-full mt-2\" />\n        <button onClick={handleDecode} className=\"bg-purple-500 text-white px-4 py-2 mt-2\">Decode</button>\n        <div className=\"bg-gray-100 p-2 mt-2\">{decodedMessage}</div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {isAuthReady && renderMain()}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}